-- schema.sql (compact rebuild)
CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE TABLE IF NOT EXISTS salon (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), name TEXT NOT NULL);
CREATE TABLE IF NOT EXISTS client (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), salon_id UUID REFERENCES salon(id) ON DELETE CASCADE, name TEXT NOT NULL, phone TEXT, email TEXT, birthdate DATE, marketing_consent BOOLEAN DEFAULT FALSE, notes TEXT, gdpr_consent_at TIMESTAMP, created_at TIMESTAMP DEFAULT now());
CREATE TABLE IF NOT EXISTS staff (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), salon_id UUID REFERENCES salon(id) ON DELETE CASCADE, name TEXT NOT NULL, role TEXT, color_hex TEXT, active BOOLEAN DEFAULT TRUE, skills TEXT[] DEFAULT '{}');
CREATE TABLE IF NOT EXISTS service (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), salon_id UUID REFERENCES salon(id) ON DELETE CASCADE, name TEXT NOT NULL, category TEXT, duration_min INT NOT NULL, price_eur NUMERIC(10,2) DEFAULT 0, requires_deposit BOOLEAN DEFAULT FALSE, deposit_eur NUMERIC(10,2));
CREATE TABLE IF NOT EXISTS booking (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), salon_id UUID REFERENCES salon(id) ON DELETE CASCADE, client_id UUID REFERENCES client(id) ON DELETE SET NULL, staff_id UUID REFERENCES staff(id) ON DELETE SET NULL, service_id UUID REFERENCES service(id) ON DELETE SET NULL, start_ts TIMESTAMP NOT NULL, end_ts TIMESTAMP NOT NULL, status TEXT DEFAULT 'hold' CHECK (status IN ('hold','confirmed','in_progress','ready','cancelled','no_show','completed')), notes TEXT, created_at TIMESTAMP DEFAULT now());
CREATE TABLE IF NOT EXISTS payment (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), booking_id UUID REFERENCES booking(id) ON DELETE CASCADE, amount_eur NUMERIC(10,2) NOT NULL, currency TEXT DEFAULT 'EUR', status TEXT DEFAULT 'created' CHECK (status IN ('created','paid','failed','refunded')), provider TEXT, created_at TIMESTAMP DEFAULT now());
CREATE TABLE IF NOT EXISTS client_note (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), client_id UUID REFERENCES client(id) ON DELETE CASCADE, created_at TIMESTAMP DEFAULT now(), type TEXT DEFAULT 'note', content TEXT NOT NULL, photo_url TEXT);
CREATE TABLE IF NOT EXISTS staff_schedule (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), staff_id UUID REFERENCES staff(id) ON DELETE CASCADE, weekday INT NOT NULL, start_time TIME NOT NULL, end_time TIME NOT NULL);
CREATE TABLE IF NOT EXISTS staff_holiday (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), staff_id UUID REFERENCES staff(id) ON DELETE CASCADE, start_date DATE NOT NULL, end_date DATE NOT NULL, reason TEXT);
CREATE TABLE IF NOT EXISTS service_price_by_staff (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), service_id UUID REFERENCES service(id) ON DELETE CASCADE, staff_id UUID REFERENCES staff(id) ON DELETE CASCADE, price_eur NUMERIC(10,2) NOT NULL);
CREATE TABLE IF NOT EXISTS pkg_definition (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), salon_id UUID REFERENCES salon(id) ON DELETE CASCADE, name TEXT NOT NULL, price_eur NUMERIC(10,2) NOT NULL, valid_days INT DEFAULT 365, created_at TIMESTAMP DEFAULT now());
CREATE TABLE IF NOT EXISTS pkg_definition_item (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), pkg_id UUID REFERENCES pkg_definition(id) ON DELETE CASCADE, service_id UUID REFERENCES service(id) ON DELETE CASCADE, qty INT NOT NULL);
CREATE TABLE IF NOT EXISTS pkg_wallet (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), client_id UUID REFERENCES client(id) ON DELETE CASCADE, pkg_id UUID REFERENCES pkg_definition(id) ON DELETE CASCADE, purchased_at TIMESTAMP DEFAULT now(), expires_at DATE);
CREATE TABLE IF NOT EXISTS pkg_wallet_item (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), wallet_id UUID REFERENCES pkg_wallet(id) ON DELETE CASCADE, service_id UUID REFERENCES service(id) ON DELETE CASCADE, remaining INT NOT NULL);
CREATE TABLE IF NOT EXISTS gift_card (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), salon_id UUID REFERENCES salon(id) ON DELETE CASCADE, code TEXT UNIQUE NOT NULL, amount_eur NUMERIC(10,2) NOT NULL, balance_eur NUMERIC(10,2) NOT NULL, purchased_at TIMESTAMP DEFAULT now(), expires_at DATE);
CREATE TABLE IF NOT EXISTS notification_template (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), salon_id UUID REFERENCES salon(id) ON DELETE CASCADE, type TEXT CHECK (type IN ('confirm_email','reminder_email','noshow_email','confirm_sms','reminder_sms','noshow_sms')), subject TEXT, body TEXT);
